{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["renderer","marked","Renderer","setOptions","breaks","App","props","state","markdown","placeholder","editorMaximized","previewMaximized","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","event","this","setState","target","value","console","log","classes","className","icon","onClick","text","onChange","React","Component","Toolbar","title","Editor","id","type","Preview","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAIMA,EAAW,IAAIC,IAAOC,SAC5BD,IAAOE,WAAW,CAChBC,QAAQ,I,IAGJC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,SAAUC,EACVC,iBAAiB,EACjBC,kBAAkB,GAEpB,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,qBAAqB,EAAKA,qBAAqBD,KAA1B,gBAC1B,EAAKE,sBAAsB,EAAKA,sBAAsBF,KAA3B,gBATX,E,yDAWLG,GACXC,KAAKC,SAAS,CACZV,SAAUQ,EAAMG,OAAOC,U,6CAIzBH,KAAKC,SAAS,CACZR,iBAAkBO,KAAKV,MAAMG,oB,8CAI/BO,KAAKC,SAAS,CACZP,kBAAmBM,KAAKV,MAAMI,qB,+BAKhCU,QAAQC,IAAIL,KAAKV,MAAMI,kBACvB,IAAMY,EAAUN,KAAKV,MAAMG,gBACrB,CAAC,uBAAwB,mBAAoB,kBAC7CO,KAAKV,MAAMI,iBACX,CAAC,kBAAmB,wBAAyB,kBAC7C,CAAC,aAAc,cAAe,oBACpC,OACE,6BACE,yBAAKa,UAAWD,EAAQ,IACtB,kBAAC,EAAD,CAASE,KAAMF,EAAQ,GAAIG,QAAST,KAAKH,qBAAsBa,KAAK,WACpE,kBAAC,EAAD,CAAQnB,SAAUS,KAAKV,MAAMC,SAAUoB,SAAUX,KAAKL,gBAExD,yBAAKY,UAAWD,EAAQ,IACtB,kBAAC,EAAD,CAASE,KAAMF,EAAQ,GAAIG,QAAST,KAAKF,sBAAuBY,KAAK,cACrE,kBAAC,EAAD,CAASnB,SAAUS,KAAKV,MAAMC,iB,GA3CtBqB,IAAMC,WAkDlBC,EAAQ,SAACzB,GACb,OACE,yBAAKkB,UAAU,WACb,uBAAGQ,MAAM,oBAAoBR,UAAU,wBACtClB,EAAMqB,KACP,uBAAGD,QAASpB,EAAMoB,QAASF,UAAWlB,EAAMmB,SAK5CQ,EAAO,SAAC3B,GACZ,OACE,8BAAU4B,GAAG,SAASC,KAAK,OAAOf,MAAOd,EAAME,SAAUoB,SAAUtB,EAAMsB,YAIvEQ,EAAQ,SAAC9B,GACb,OACE,yBAAK4B,GAAG,UAAUG,wBAAyB,CAACC,OAAOrC,IAAOK,EAAME,SAAU,CAACR,SAASA,QAKlFS,EAAW,8lBA4BFJ,IClGKkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.27bbbd24.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from 'marked';\n\nconst renderer = new marked.Renderer();\nmarked.setOptions({\n  breaks: true,\n});\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      markdown: placeholder,\n      editorMaximized: false, //cua so editor se phong to khi co gia tri bang true\n      previewMaximized: false\n    }\n    this.handleChange=this.handleChange.bind(this);\n    this.handleEditorMaximize=this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize=this.handlePreviewMaximize.bind(this);\n  }\n  handleChange(event){ //xu li su kien thay doi text trong editor\n    this.setState({\n      markdown: event.target.value\n    })\n  }\n  handleEditorMaximize(){\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    })\n  }\n  handlePreviewMaximize(){\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    })\n  }\n  \n  render(){\n    console.log(this.state.previewMaximized);\n    const classes = this.state.editorMaximized ? \n          ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress'] : \n          this.state.previewMaximized ?\n          ['editorWrap hide', 'previewWrap maximized', 'fa fa-compress'] :\n          ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];\n    return(\n      <div>\n        <div className={classes[0]}>\n          <Toolbar icon={classes[2]} onClick={this.handleEditorMaximize} text=\"Editor\"/>\n          <Editor markdown={this.state.markdown} onChange={this.handleChange} />\n        </div>\n        <div className={classes[1]}>\n          <Toolbar icon={classes[2]} onClick={this.handlePreviewMaximize} text=\"Previewer\"/>\n          <Preview markdown={this.state.markdown}/>\n        </div>\n      </div>\n    ) \n  }\n}\n\nconst Toolbar=(props)=>{\n  return (\n    <div className=\"toolbar\">\n      <i title=\"no-stack-dub-sack\" className=\"fa fa-optin-monster\"/>\n      {props.text}\n      <i onClick={props.onClick} className={props.icon}/>\n    </div>\n  )\n}\n\nconst Editor=(props)=>{\n  return(\n    <textarea id=\"editor\" type=\"text\" value={props.markdown} onChange={props.onChange}></textarea>\n  )\n}\n\nconst Preview=(props)=>{\n  return(\n    <div id=\"preview\" dangerouslySetInnerHTML={{__html:marked(props.markdown, {renderer:renderer})}}>\n    </div>\n  )\n}\n\nconst placeholder = `# Hello my name is Hung Nguyen\n## Welcome to my Markdown Previewer\n\n[My Github account](https://github.com/hungnguyen7)\n\nI'm a \\`coder\\`\n\n\n\\`\\`\\`\n// this is multi-line code:\n\nconst markdown=(firstLine, lastLine)=>{\n  console.log(\"This is multi-line code\");\n}\n\\`\\`\\`\n\n1. First ordered list item\n2. Another item\n\n>Tri nhân giả tri, tự tri khả trí. Thắng nhân giả lực, tự thắng giả cường.\n\n**A JavaScript library for building user interfaces\nGet Started\nTake the Tutorial** \n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n\n`;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}